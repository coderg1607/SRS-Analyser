# -*- coding: utf-8 -*-
"""SRI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/115sTCu6iXq4EFGaB0ifM9B_VmOfhHOqa

# **Input Section**
"""

# #temprary text
# temp_text = "An Airline Ticketing System allows the customer to order tickets and to look for a suitable flight. In order to look up a ticket, the Customer needs to enter the name of the traveller, the chosen flight, and finally booking the airline tickets. When looking up a flight, system provides a list of available flights between two airports at a given date. There is also an option of multicity, where the customer chooses to fly through multiple destinations with halting. The system must allow the ability to look up a flight without having to order a ticket. When the order information to buy a ticket is entered, this information is automatically used to look up the flight.A third service (the help service) is available for the customer while ordering a ticket to provide a help page specific to ordering tickets. The help service can be invoked independently by the Customer, which will provide him with a “main” help page."

!pip install pypdf2
!pip install docx2txt

# import PyPDF2
# from PyPDF2 import PdfReader
# # a=PyPDF2.PdfFileReader("srs.pdf")
# reader = PdfReader("SRRS.pdf")

# # print(a.getNumPages())
# text = ""
# for page in reader.pages:
#        text += page.extract_text() + "\n"
# with open("text.txt","w",encoding = "utf-8") as f:
#           f.write(text)

import docx2txt

# Passing docx file to process function
text = docx2txt.process("Online pet store.docx")

# Saving content inside docx file into output.txt file
with open("text.txt", "w") as text_file:
	print(text, file=text_file)

#open text file in read mode
text_file = open("text.txt", "r")
 
#read whole file to a string
data = text_file.read()
 
#close file
text_file.close()

temp_text=""
temp_text=data

"""# **Text Cleaning Section** 



"""

#importing libraries 
import nltk
import re
from nltk.tokenize import sent_tokenize
nltk.download('punkt')

temp_text=temp_text.lower()
#tokenization
list_of_sentences = nltk.sent_tokenize(temp_text)
#cleaning all the sentences 
list_of_cleaned_text = []
for sentence in list_of_sentences:
  # cleaned_text = re.sub('[^a-zA-Z]', ' ',sentence)
  # cleaned_text = re.sub('\s+', ' ', cleaned_text)
  list_of_cleaned_text.append(sentence)  
print(list_of_cleaned_text)

# from termcolor import colored
# temp="hi im gautam"
# print(colored(temp, 'red'), colored('world', 'green'))

"""# **TDs**"""

import spacy
nlp=spacy.load('en_core_web_sm')
TDs_text=[]
for sentence in list_of_cleaned_text:
  temp=nlp(sentence)
  t=[]
  for i in temp:
    t.append([i.text,i.pos_ ,i.dep_ ])
  TDs_text.append(t)

# import os
# from nltk.parse import stanford
# os.environ['STANFORD_PARSER'] = '/path/to/standford/jars'
# os.environ['STANFORD_MODELS'] = '/path/to/standford/jars'

# parser = stanford.StanfordParser(model_path="/location/of/the/englishPCFG.ser.gz")
# sentences = parser.raw_parse_sents(("Hello, My name is Melroy.", "What is your name?"))
# print(sentences)

# # GUI
# for line in sentences:
#     for sentence in line:
#         sentence.draw()

"""# **Recommendation**"""

def printer(line,t,rule):
  ans=""
  if(any(['agent' in t])):
    return ans
  if(any(['nsubjpass' in t])):
    return ans
  i=0
  j=0
  while(t[i]!=rule[j]):
    i=i+1
  if(i==len(t)-1):
    print("false")
  else:
    ans+=line[i]
    j=j+1
    while(i<len(t) and j<len(rule)):
      if(t[i]==rule[j]):
        j=j+1
      if(j!=len(rule)):
        i=i+1
        ans+=" "
        ans+=line[i]
  if(j==len(rule)):
    return ans
  else:
    ans=""
    return ans

# def is_passive(inp):
#   checkPassiveTest = any(['agent' in inp])
#   checkPassiveTestTwo = any(['nsubjpass' in inp])
#   return checkPassiveTest or checkPassiveTestTwo
from spacy.matcher import Matcher


def is_passive(sentence):
    doc = nlp(sentence)
    matcher = Matcher(nlp.vocab)
    passive_rule = [{'DEP': 'nsubjpass'}, {'DEP': 'aux', 'OP': '*'}, {'DEP': 'auxpass'}, {'TAG': 'VBN'}]
    matcher.add('Passive', [passive_rule])
    matches = matcher(doc)
    if matches:
        return True
    else:
        return False

def sentence_partition(inp,td,tag):
  st=inp[td.index(tag):td.index('cc')]
  st1=inp[td.index(tag):td.index('cc')-1]
  end=inp[td.index('cc')+1:]
  temp=" ".join(st)
  temp+="."
  temp+=" ".join(st1)
  temp+=" "
  temp+=" ".join(end)
  temp+="."
  return temp

def conjuction_checker(inp):
  return any(['cc' in inp])

def matcher(rule,inp):
  i=0
  j=0
  while i<len(rule) and j<len(inp):
    if(rule[i]==inp[j]):
      i=i+1
      j=j+1
    else:
      j=j+1
  return i==len(rule)

def matcher2(rule,inp,pos_list,pos_tag):
  flag=False
  if pos_tag in pos_list:
    flag=True
  i=0
  j=0
  while i<len(rule) and j<len(inp):
    if(rule[i]==inp[j]):
      i=i+1
      j=j+1
    else:
      j=j+1
  return (flag and i==len(rule))

rule_1=['nsubj','iobj','dobj']
rule_2=['nsubj','dobj','mark','nsubj']
rule_3=['nsubj','mark','nsubj']
rule_4=['nsubj','neg','mark','xcomp','dobj']
rule_5=['nsubj','dobj','acl']
rule_6=['nsubj','dobj','acl']
rule_7=['nsubj','dobj','advmod']
rule_8=['nsubj','dobj','case','nmod']
rule_9=['nsubj','advmod','mark','xcomp']
rule_10=['nsubj','advmod','nsubj','advcl']
rule_11=['nsubj','mark','xcomp']
rule_12=['nsubj','xcomp']
rule_13=['nsubj','advmod']
rule_14=['nsubj','attr']
rule_15=['nsubj','case','nummod','nmod']
rule_16=['nsubjpass','auxpass','case','nmod']
rule_17=['nsubj','dobj']
rule_18=['nsubj'] 
rule_19=['nsubj','case','nmod']
rule_20=['mark'] 
rule_21=['nsubj','dobj','neg','mark','acl']
rule_22=['nsubj','dobj','mark','attr','xcomp']
rule_23=['nsubj','dobj','mark','acl']
rule_24=['nsubj','nsubj','xcomp']
rule_25=['nsubj','dobj','advmod','mark','xcomp']
rule_26=['advmod','mark'] 
rule_27=['nsubjpass','aux','auxpass','ROOT','case','nmod']
rule_28=['nsubj','ROOT','dobj']
rule_29=['nsubj','ROOT','dobj','pobj']
rule_30=['nsubj','ROOT','pobj']
rule_31=['nsubj','ROOT','dobj','dobj']

ans=[]
ans_string=""
for sentence in TDs_text:
  pos_list=[]
  tag_list=[]
  line=[]
  xlsx_part=[]
  sentence_string=""
  tag_string=""
  ans_string=""
  for word in sentence:
    line.append(word[0])
    sentence_string+=word[0]
    sentence_string+=" " 
    tag_string+=word[2]
    tag_string+=" , "   
    pos_list.append(word[1])
    tag_list.append(word[2])
  
  if(is_passive(sentence_string)):
    ans_string+=sentence_string
    ans_string+="."
    ans.append([sentence_string,tag_string,'passive voice',"The sentence is in passive voice,Change into Active voice"])

  elif(matcher(rule_4,tag_list)):
    temp=printer(line,tag_list,rule_4)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 4',ans_string])

  elif(matcher(rule_22,tag_list)):
    temp=printer(line,tag_list,rule_22)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 22',ans_string])

  elif(matcher(rule_21,tag_list)):
    temp=printer(line,tag_list,rule_21)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 21',ans_string])

  elif(matcher(rule_25,tag_list)):
    temp=printer(line,tag_list,rule_25)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 25',ans_string])

  elif(matcher(rule_2,tag_list)):
    temp=printer(line,tag_list,rule_2)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 2',ans_string])

  elif(matcher(rule_8,tag_list)):
    temp=printer(line,tag_list,rule_8)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 8',ans_string])

  elif(matcher(rule_9,tag_list)):
    temp=printer(line,tag_list,rule_9)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 9',ans_string])

  elif(matcher(rule_10,tag_list)):
    temp=printer(line,tag_list,rule_10)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 10',ans_string])

  elif(matcher(rule_15,tag_list)):
    temp=printer(line,tag_list,rule_15)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 15',ans_string])

  elif(matcher(rule_23,tag_list)):
    temp=printer(line,tag_list,rule_23)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 23',ans_string])


  elif(matcher(rule_19,tag_list)):
    temp=printer(line,tag_list,rule_19)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 19',ans_string])

  elif(matcher(rule_29,tag_list)):
    temp=printer(line,tag_list,rule_29)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 29',ans_string])

  elif(matcher(rule_31,tag_list)):
    temp=printer(line,tag_list,rule_31)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 30',ans_string])

  elif(matcher(rule_1,tag_list)):
    temp=printer(line,tag_list,rule_1)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 1',ans_string])

  elif(matcher(rule_3,tag_list)):
    temp=printer(line,tag_list,rule_3)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 3',ans_string])

  elif(matcher2(rule_5,tag_list,pos_list,'VBG')):
    temp=printer(line,tag_list,rule_5)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 5',ans_string])

  elif(matcher2(rule_6,tag_list,pos_list,'VBN')):
    temp=printer(line,tag_list,rule_6)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 6',ans_string])

  elif(matcher(rule_7,tag_list)):
    temp=printer(line,tag_list,rule_7)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 7',ans_string])

  elif(matcher(rule_11,tag_list)):
    temp=printer(line,tag_list,rule_11)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 11',ans_string])

  elif(matcher(rule_19,tag_list)):
    temp=printer(line,tag_list,rule_19)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 19',ans_string])

  elif(matcher2(rule_24,tag_list,pos_list,'JJ')):
    temp=printer(line,tag_list,rule_24)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 24',ans_string])

  elif(matcher(rule_28,tag_list)):
    temp=printer(line,tag_list,rule_28)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 28',ans_string])

  elif(matcher(rule_30,tag_list)):
    temp=printer(line,tag_list,rule_30)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 30',ans_string])

  elif(matcher(rule_12,tag_list)):
     temp=printer(line,tag_list,rule_12)
     ans_string+=temp
     ans_string+="."
     if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
     ans.append([sentence_string,tag_string,'SSR 12',ans_string])

  elif(matcher(rule_14,tag_list)):
    temp=printer(line,tag_list,rule_14)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 14',ans_string])

  elif(matcher(rule_17,tag_list)):
    temp=printer(line,tag_list,rule_17)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 17',ans_string])

  elif(matcher(rule_26,tag_list)):
    temp=printer(line,tag_list,rule_16)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubjpass')
    ans.append([sentence_string,tag_string,'SSR 26',ans_string])

  elif(matcher(rule_13,tag_list)):
    temp=printer(line,tag_list,rule_13)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 13',ans_string])

  elif(matcher(rule_18,tag_list)):
    temp=printer(line,tag_list,rule_18)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'nsubj')
    ans.append([sentence_string,tag_string,'SSR 18',ans_string])

  elif(matcher(rule_20,tag_list)):
    temp=printer(line,tag_list,rule_20)
    ans_string+=temp
    ans_string+="."
    if(conjuction_checker(tag_list)):
      ans_string=sentence_partition(line,tag_list,'mark')
    ans.append([sentence_string,tag_string,'SSR 20',ans_string])

  else : 
    ans_string+=sentence_string
    ans_string+="."
    ans.append([sentence_string,tag_string,'NA','NA'])

"""# **Quality Metrices**"""

def check(small, big):
    for i in range(len(big)-len(small)+1):
        for j in range(len(small)):
            if big[i+j] != small[j]:
                break
        else:
            return [i, i+len(small)]
    return [0]

"""# **Vagueness calculation:**"""

v1=['may']
v2=['could'] 
v3=['has','to']
v4= ['have', 'to']
v5=['might']
v6=['will']
v7=[ 'should', 'have']
v8=['must',' have']
v9=['all','the','other']
v10=['all','other']
v11=['based','on']
v12=['some']  
v13=['appropriate']
v14=['as','a']
v15=['as','an']
v16=['a','minimum']
v17=['up','to']
v18=['adequate']
v19=['as','applicable']
v20=['be','able','to']
v21=['be','capable']
v22=['but', 'not', 'limited', 'to']
v23=['capability','of']
v24=['capability','to']
v25=['effective']
v26=['normal']
v27=['a','few']
v28=['a','lot', 'of']
v29=['about']
v30=['any']
v31=['approximate']
v32=['approximately']
v33=['as','a','maximum']
v34=['as','a','minimum']
v35=['as','appropriate'] 
v36=['as','much','as','possible']
v37=['as','far','as','possible']
v38=['as','little','as','possible']
v39=['as','required']
v40=['as','necessary']
v41=['at','least']
v42=['as','possible']
v43=['be','capable','of']
v44=['best','possible']
v45=['possibly']
v46=['eventually']
v47=['if','possible']
v48=['if','needed']
v49=['if','case']
v50=['similarly']
v51=['take','into','account']
v52=['take','into','consideration']
v53=['clear']
v54=['easy']
v55=['easily']
v56=['strong']
v57=['good']
v58=['bad']
v59=['efficient']
v60=['useful']
v61=['suitable']
v62=['significant']
v63=['fast']
v64=['recent']
v65=['far']
v66=['close']
v67=['in','front']
v68=['can']
v69=['worse','having','in','mind']
v70=['probably']
v71=['clear']
v72=['slow']
v73=['near']
v74=['near','by']

sentence_Vagueness_score=[]
for sentence in list_of_cleaned_text:
  count=[]
  s=sentence.split()
  r1=check(v1,s)
  if(len(r1)==2):
    count.append(" ".join(v1))
  r2=check(v2,s)
  if(len(r2)==2):
    count.append(" ".join(v2))
  r3=check(v3,s)
  if(len(r3)==2):
    count.append(" ".join(v3))
  r4=check(v4,s)
  if(len(r4)==2):
    count.append(" ".join(v4))
  r5=check(v5,s)
  if(len(r5)==2):
    count.append(" ".join(v5))
  r6=check(v6,s)
  if(len(r6)==2):
    count.append(" ".join(v6))
  r7=check(v7,s)
  if(len(r7)==2):
    count.append(" ".join(v7))
  r8=check(v8,s)
  if(len(r8)==2):
    count.append(" ".join(v8))
  r9=check(v9,s)
  if(len(r9)==2):
    count.append(" ".join(v9))
  r10=check(v10,s)
  if(len(r10)==2):
    count.append(" ".join(v10))
  r11=check(v11,s)
  if(len(r11)==2):
    count.append(" ".join(v11))
  r12=check(v12,s)
  if(len(r12)==2):
    count.append(" ".join(v12))
  r13=check(v13,s)
  if(len(r13)==2):
    count.append(" ".join(v13))
  r14=check(v14,s)
  if(len(r14)==2):
    count.append(" ".join(v14))
  r15=check(v15,s)
  if(len(r15)==2):
    count.append(" ".join(v15))
  r16=check(v16,s)
  if(len(r16)==2):
    count.append(" ".join(v16))
  r17=check(v17,s)
  if(len(r17)==2):
    count.append(" ".join(v17))
  r18=check(v18,s)
  if(len(r18)==2):
    count.append(" ".join(v18))
  r19=check(v19,s)
  if(len(r19)==2):
    count.append(" ".join(v19))
  r20=check(v20,s)
  if(len(r20)==2):
    count.append(" ".join(v20))
  r21=check(v21,s)
  if(len(r21)==2):
    count.append(" ".join(v21))
  r22=check(v22,s)
  if(len(r22)==2):
    count.append(" ".join(v22))
  r23=check(v23,s)
  if(len(r23)==2):
    count.append(" ".join(v23))
  r24=check(v24,s)
  if(len(r24)==2):
    count.append(" ".join(v24))
  r25=check(v25,s)
  if(len(r25)==2):
    count.append(" ".join(v25))
  r26=check(v26,s)
  if(len(r26)==2):
    count.append(" ".join(v26))
  r27=check(v27,s)
  if(len(r27)==2):
    count.append(" ".join(v27))
  r28=check(v28,s)
  if(len(r28)==2):
    count.append(" ".join(v28))
  r29=check(v29,s)
  if(len(r29)==2):
    count.append(" ".join(v29))
  r30=check(v30,s)
  if(len(r30)==2):
    count.append(" ".join(v30))
  r31=check(v31,s)
  if(len(r31)==2):
    count.append(" ".join(v31))
  r32=check(v32,s)
  if(len(r32)==2):
    count.append(" ".join(v32))
  r33=check(v33,s)
  if(len(r33)==2):
    count.append(" ".join(v33))
  r34=check(v34,s)
  if(len(r34)==2):
    count.append(" ".join(v34))
  r35=check(v35,s)
  if(len(r35)==2):
    count.append(" ".join(v35))
  r36=check(v36,s)
  if(len(r36)==2):
    count.append(" ".join(v36))
  r37=check(v37,s)
  if(len(r37)==2):
    count.append(" ".join(v37))
  r38=check(v38,s)
  if(len(r38)==2):
    count.append(" ".join(v38))
  r39=check(v39,s)
  if(len(r39)==2):
    count.append(" ".join(v39))
  r40=check(v40,s)
  if(len(r40)==2):
    count.append(" ".join(v40))
  r41=check(v41,s)
  if(len(r41)==2):
    count.append(" ".join(v41))
  r42=check(v42,s)
  if(len(r42)==2):
    count.append(" ".join(v42))
  r43=check(v43,s)
  if(len(r43)==2):
    count.append(" ".join(v43))
  r44=check(v44,s)
  if(len(r44)==2):
    count.append(" ".join(v44))
  r45=check(v45,s)
  if(len(r45)==2):
    count.append(" ".join(v45))
  r46=check(v46,s)
  if(len(r46)==2):
    count.append(" ".join(v46))
  r47=check(v47,s)
  if(len(r47)==2):
    count.append(" ".join(v47))
  r48=check(v48,s)
  if(len(r48)==2):
    count.append(" ".join(v48))
  r49=check(v49,s)
  if(len(r49)==2):
    count.append(" ".join(v49))
  r50=check(v50,s)
  if(len(r50)==2):
    count.append(" ".join(v50))
  r51=check(v51,s)
  if(len(r51)==2):
     count.append(" ".join(v51))
  r52=check(v52,s)
  if(len(r52)==2):
    count.append(" ".join(v52))
  r53=check(v53,s)
  if(len(r53)==2):
    count.append(" ".join(v53))
  r54=check(v54,s)
  if(len(r54)==2):
    count.append(" ".join(v54))
  r55=check(v55,s)
  if(len(r55)==2):
    count.append(" ".join(v55))
  r56=check(v56,s)
  if(len(r56)==2):
    count.append(" ".join(v56))
  r57=check(v57,s)
  if(len(r57)==2):
    count.append(" ".join(v57))
  r58=check(v58,s)
  if(len(r58)==2):
    count.append(" ".join(v58))
  r59=check(v59,s)
  if(len(r59)==2):
    count.append(" ".join(v59))
  r60=check(v60,s)
  if(len(r60)==2):
    count.append(" ".join(v60))
  r61=check(v61,s)
  if(len(r61)==2):
    count.append(" ".join(v61))
  r62=check(v62,s)
  if(len(r62)==2):
    count.append(" ".join(v62))
  r63=check(v63,s)
  if(len(r63)==2):
    count.append(" ".join(v63))
  r64=check(v64,s)
  if(len(r64)==2):
    count.append(" ".join(v64))
  r65=check(v65,s)
  if(len(r65)==2):
    count.append(" ".join(v65))
  r66=check(v66,s)
  if(len(r66)==2):
     count.append(" ".join(v66))
  r67=check(v67,s)
  if(len(r67)==2):
    count.append(" ".join(v67))
  r68=check(v68,s)
  if(len(r68)==2):
    count.append(" ".join(v68))
  r69=check(v69,s)
  if(len(r69)==2):
    count.append(" ".join(v69))
  r70=check(v70,s)
  if(len(r70)==2):
    count.append(" ".join(v70))
  r71=check(v71,s)
  if(len(r71)==2):
    count.append(" ".join(v71))
  r72=check(v72,s)
  if(len(r72)==2):
    count.append(" ".join(v72))
  r73=check(v73,s)
  if(len(r73)==2):
    count.append(" ".join(v73))
  r74=check(v73,s) 
  if(len(r74)==2):
    count.append(" ".join(v74))
  sentence_Vagueness_score.append(count)

"""# **Optionality Calculation:**"""

o1=['can']
o2=['may']
o3=['optionally']
o4=['possibly']
o5=['eventually']
o6=['if','case']
o7=['if','possible']
o8=['if','appropriate']
o9=['if','needed']

sentence_Optionality_score=[]
for sentence in list_of_cleaned_text:
  s=sentence.split()
  cout=[]
  r1=check(o1,s)
  if(len(r1)==2):
    count.append(" ".join(o1))
  r2=check(o2,s)
  if(len(r2)==2):
    cout.append(" ".join(o2))
  r3=check(o3,s)
  if(len(r3)==2):
    cout.append(" ".join(o3))
  r4=check(o4,s)
  if(len(r4)==2):
    cout.append(" ".join(o4))
  r5=check(o5,s)
  if(len(r5)==2):
    cout.append(" ".join(o5))
  r6=check(o6,s)
  if(len(r6)==2):
    cout.append(" ".join(o6))
  r7=check(o7,s)
  if(len(r7)==2):
    cout.append(" ".join(o7))
  r8=check(o8,s)
  if(len(r8)==2):
    cout.append(" ".join(o8))
  r9=check(o9,s)
  if(len(r9)==2):
    cout.append(" ".join(o9))
  sentence_Optionality_score.append(cout)

"""# **Subjectivity Calculation:**"""

a1=['similar']
a2=['better']
a3=['similarly']
a4=['worse']
a5=['having','in','mind']
a6=['take','into','account']
a6=['take','into','consideration']
a7=['as','as','possible']

sentence_Subjectivity_score=[]
for sentence in list_of_cleaned_text:
  cout=[]
  s=sentence.split()
  r1=check(a1,s)
  if(len(r1)==2):
    cout.append(" ".join(a1))
  r2=check(a2,s)
  if(len(r2)==2):
    cout.append(" ".join(a2))
  r3=check(a3,s)
  if(len(r3)==2):
    cout.append(" ".join(a3))
  r4=check(a4,s)
  if(len(r4)==2):
    cout.append(" ".join(a4))
  r5=check(a5,s)
  if(len(r5)==2):
    cout.append(" ".join(a5))
  r6=check(a6,s)
  if(len(r6)==2):
    cout.append(" ".join(a6))
  r7=check(a7,s)
  if(len(r7)==2):
    cout.append(" ".join(a7))
  sentence_Subjectivity_score.append(cout)

"""# **Implicity Calculation:**"""

b1=['this']
b2=['these']
b3=['that']
b4=['those']

sentence_implicityty_score=[]
for sentence in list_of_cleaned_text:
  cout=[]
  s=sentence.split()
  r1=check(b1,s)
  if(len(r1)==2):
    cout.append(" ".join(b1))
  r2=check(b2,s)
  if(len(r2)==2):
    cout.append(" ".join(b2))
  r3=check(b3,s)
  if(len(r3)==2):
    cout.append(" ".join(b3))
  r4=check(b4,s)
  if(len(r4)==2):
    cout.append(" ".join(b4))
  sentence_implicityty_score.append(cout)

"""# **Imprecise terms Calculation :**"""

c1=['good']
c2=['adequate']
c3=['efficient']
c4=['enough']
c5=['sufficient']
c6=['approximately']
c7=['nearly','always']
c8=['generally']
c9=['typically']
c10=['several']
c11=['to','be','defined']
c12=['not','limited','to']
c13=['possibly']
c14=['probably']
c15=['optionally']
c16=['adaptable']
c17=['extensible']
c18=['easy']
c19=['familiar'] 
c20=['safe']

sentence_Imprecise_score=[]
for sentence in list_of_cleaned_text:
  cout=[]
  s=sentence.split()
  r1=check(c1,s)
  if(len(r1)==2):
    cout.append(" ".join(c1))
  r2=check(c2,s)
  if(len(r2)==2):
    cout.append(" ".join(c2))
  r3=check(c3,s)
  if(len(r3)==2):
    cout.append(" ".join(c3))
  r4=check(c4,s)
  if(len(r4)==2):
    cout.append(" ".join(c4))
  r5=check(c5,s)
  if(len(r5)==2):
    cout.append(" ".join(c5))
  r6=check(c6,s)
  if(len(r6)==2):
   cout.append(" ".join(c6))
  r7=check(c7,s)
  if(len(r7)==2):
    cout.append(" ".join(c7))
  r8=check(c8,s)
  if(len(r8)==2):
    cout.append(" ".join(c8))
  r9=check(c9,s)
  if(len(r9)==2):
    cout.append(" ".join(c9))
  r10=check(c10,s)
  if(len(r10)==2):
    cout.append(" ".join(c10))
  r11=check(c11,s)
  if(len(r11)==2):
    cout.append(" ".join(c11))
  r12=check(c12,s)
  if(len(r12)==2):
    cout.append(" ".join(c12))
  r13=check(c13,s)
  if(len(r13)==2):
    cout.append(" ".join(c13))
  r14=check(c14,s)
  if(len(r14)==2):
    cout.append(" ".join(c14))
  r15=check(c15,s)
  if(len(r15)==2):
    cout.append(" ".join(c15))
  r16=check(c16,s)
  if(len(r16)==2):
    cout.append(" ".join(c16))
  r17=check(c17,s)
  if(len(r17)==2):
    cout.append(" ".join(c17))
  r18=check(c18,s)
  if(len(r18)==2):
    cout.append(" ".join(c18))
  r19=check(c19,s)
  if(len(r19)==2):
    cout.append(" ".join(c19))
  r20=check(c20,s)
  if(len(r20)==2):
    cout.append(" ".join(c20))
  sentence_Imprecise_score.append(cout)

"""# **Imperatives term Calculation:**"""

d1=['shall']
d2=['must']
d3=['is','required','to']
d4=['are','applicable']
d5=['are','to']
d6=['responsible','for']
d7=['will']
d8=['should']
d9=['could']
d10=['would']
d11=['can','may']

sentence_Imperatives_score=[]
for sentence in list_of_cleaned_text:
  cout=[]
  s=sentence.split()
  r1=check(d1,s)
  if(len(r1)==2):
    cout.append(" ".join(d1))
  r2=check(d2,s)
  if(len(r2)==2):
    cout.append(" ".join(d2))
  r3=check(d3,s)
  if(len(r3)==2):
    cout.append(" ".join(d3))
  r4=check(d4,s)
  if(len(r4)==2):
    cout.append(" ".join(d4))
  r5=check(d5,s)
  if(len(r5)==2):
    cout.append(" ".join(d5))
  r6=check(d6,s)
  if(len(r6)==2):
    cout.append(" ".join(d6))
  r7=check(d7,s)
  if(len(r7)==2):
    cout.append(" ".join(d7))
  r8=check(d8,s)
  if(len(r8)==2):
    cout.append(" ".join(d8))
  r9=check(d9,s)
  if(len(r9)==2):
    cout.append(" ".join(d9))
  r10=check(d10,s)
  if(len(r10)==2):
    cout.append(" ".join(d10))
  r11=check(d11,s)
  if(len(r11)==2):
    cout.append(" ".join(d11))
  sentence_Imperatives_score.append(cout)

"""# **Conjunctions :**"""

e1=['and']
e2=['after']
e3=['although']
e4=['as','long','as']
e5=['before']
e6=['but']
e7=['else'] 
e8=['if']
e10=['in','order']
e11=['in','case']
e12=['nor']
e13=['or']
e14=['otherwise']
e15=['once']
e16=['since']
e17=['then']
e18=['though']
e19=['till']
e20=['unless']
e21=['until']
e22=['when;']
e23=['whenever']
e24=['where']
e25=['whereas']
e26=['wherever']
e27=['when']
e28=['yet']

sentence_Conjunctions_score=[]
for sentence in list_of_cleaned_text:
  cout=[]
  s=sentence.split()
  r1=check(e1,s)
  if(len(r1)==2):
    cout.append(" ".join(e1))
  r2=check(e2,s)
  if(len(r2)==2):
    cout.append(" ".join(e2))
  r3=check(e3,s)
  if(len(r3)==2):
    cout.append(" ".join(e3))
  r4=check(e4,s)
  if(len(r4)==2):
    cout.append(" ".join(e4))
  r5=check(e5,s)
  if(len(r5)==2):
    cout.append(" ".join(e5))
  r6=check(e6,s)
  if(len(r6)==2):
    cout.append(" ".join(e6))
  r7=check(e7,s)
  if(len(r7)==2):
    cout.append(" ".join(e7))
  r8=check(e8,s)
  if(len(r8)==2):
    cout.append(" ".join(e8))
  r10=check(e10,s)
  if(len(r10)==2):
    cout.append(" ".join(e10))
  r11=check(e11,s)
  if(len(r11)==2):
    cout.append(" ".join(e11))
  r12=check(e12,s)
  if(len(r12)==2):
    cout.append(" ".join(e12))
  r13=check(e13,s)
  if(len(r13)==2):
    cout.append(" ".join(e13))
  r14=check(e14,s)
  if(len(r14)==2):
    cout.append(" ".join(e14))
  r15=check(e15,s)
  if(len(r15)==2):
    cout.append(" ".join(e15))
  r16=check(e16,s)
  if(len(r16)==2):
    cout.append(" ".join(e16))
  r17=check(e17,s)
  if(len(r17)==2):
    cout.append(" ".join(e17))
  r18=check(e18,s)
  if(len(r18)==2):
    cout.append(" ".join(e18))
  r19=check(e19,s)
  if(len(r19)==2):
    cout.append(" ".join(e19))
  r20=check(e20,s)
  if(len(r20)==2):
    cout.append(" ".join(e20))
  r21=check(e21,s)
  if(len(r21)==2):
    cout.append(" ".join(e21))
  r22=check(e22,s)
  if(len(r22)==2):
    cout.append(" ".join(e22))
  r23=check(e23,s)
  if(len(r23)==2):
    cout.append(" ".join(e23))
  r24=check(e24,s)
  if(len(r24)==2):
    cout.append(" ".join(e24))
  r25=check(e25,s)
  if(len(r25)==2):
    cout.append(" ".join(e25))
  r26=check(e26,s)
  if(len(r26)==2):
    cout.append(" ".join(e26))
  r27=check(e27,s)
  if(len(r27)==2):
    cout.append(" ".join(e27))
  r28=check(e28,s)
  if(len(r28)==2):
    cout.append(" ".join(e28))
  sentence_Conjunctions_score.append(cout)

"""# **Output/Report Generation**"""

!pip install xlsxwriter

import xlsxwriter
workbook = xlsxwriter.Workbook('Example1.xlsx')
s = workbook.add_worksheet("My sheet")

s.set_default_row(40)
format1 = workbook.add_format()
format1.set_text_wrap()
format2 = workbook.add_format({'bg_color':'#6AA121','border':1})
format3 = workbook.add_format({'bold': True, 'font_color': 'red'})

s.write(2,0,"Sentence",format2)
s.write(2,1,"TDs",format2)
s.write(2,2,"Rule",format2)
s.write(2,3,"Rcommendation",format2)
s.write(2,4,"Vagueness",format2)
s.write(2,5,"Optionality",format2)
s.write(2,6,"Subjectivity",format2)
s.write(2,7,"Implicity",format2)
s.write(2,8,"Imprecise terms",format2)
s.write(2,9,"Imperatives",format2)
s.write(2,10,"Conjunctions",format2)

s.set_column(0,0,width=50,cell_format=format1)
s.set_column(1,1,width=50,cell_format=format1)
s.set_column(2,2,width=20,cell_format=format1)
s.set_column(3,3,width=40,cell_format=format1)
s.set_column(4,4,width=20,cell_format=format1)
s.set_column(5,5,width=20,cell_format=format1)
s.set_column(6,6,width=20,cell_format=format1)
s.set_column(7,7,width=20,cell_format=format1)
s.set_column(8,8,width=20,cell_format=format1)
s.set_column(9,9,width=20,cell_format=format1)
s.set_column(10,10,width=20,cell_format=format1)


row = 3
for i in (ans):
	s.write(row, 0 ,i[0])
	row += 1

row = 3
for i in (ans):
	s.write(row, 1 ,i[1])
	row += 1

row = 3
for i in (ans):
	if(i[2]=='passive voice'):
		s.write(row, 2 ,i[2],format3)
	else:
		s.write(row, 2 ,i[2])
	row += 1

row = 3
for i in (ans):
	s.write(row, 3 ,i[3])
	row+=1

row = 3
for i in (sentence_Vagueness_score):
	s.write(row, 4 ," ,".join(i))
	row += 1

row = 3
for i in (sentence_Optionality_score):
	s.write(row, 5 ," ,".join(i))
	row += 1

row = 3
for i in (sentence_Subjectivity_score):
	s.write(row, 6 ," ,".join(i))
	row += 1

row = 3
for i in (sentence_implicityty_score):
	s.write(row, 7 ," ,".join(i))
	row += 1

row = 3
for i in (sentence_Imprecise_score):
	s.write(row, 8 ," ,".join(i))
	row += 1

row = 3
for i in (sentence_Imperatives_score):
	s.write(row, 9 ," ,".join(i))
	row +=1

row = 3
for i in (sentence_Conjunctions_score):
	s.write(row, 10 ," ,".join(i))
	row += 1

workbook.close()